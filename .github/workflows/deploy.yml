name: üöÄ FTP Deployment for Express Backend

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: üéâ Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: server
      url: https://benzflex.com

    steps:
      - name: üöö Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: üîç Debug FTP Secrets
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "=== Debugging FTP Secrets ==="
          echo "FTP_SERVER length: ${#FTP_SERVER}"
          echo "FTP_USERNAME length: ${#FTP_USERNAME}"
          echo "FTP_PASSWORD length: ${#FTP_PASSWORD}"

          if [ -z "$FTP_SERVER" ]; then
            echo "‚ùå FTP_SERVER is EMPTY or NOT SET"
          else
            echo "‚úÖ FTP_SERVER is set (first 10 chars: ${FTP_SERVER:0:10}...)"
          fi

          if [ -z "$FTP_USERNAME" ]; then
            echo "‚ùå FTP_USERNAME is EMPTY or NOT SET"
          else
            echo "‚úÖ FTP_USERNAME is set (value: $FTP_USERNAME)"
          fi

          if [ -z "$FTP_PASSWORD" ]; then
            echo "‚ùå FTP_PASSWORD is EMPTY or NOT SET"
          else
            echo "‚úÖ FTP_PASSWORD is set (length: ${#FTP_PASSWORD} characters)"
          fi

          # Check if any are missing
          if [ -z "$FTP_SERVER" ] || [ -z "$FTP_USERNAME" ] || [ -z "$FTP_PASSWORD" ]; then
            echo "::error::One or more FTP secrets are missing or empty!"
            echo "Please check your GitHub repository secrets in Settings -> Secrets and variables -> Actions"
            echo "Required secrets: FTP_SERVER, FTP_USERNAME, FTP_PASSWORD"
            exit 1
          fi

          echo "‚úÖ All FTP secrets are properly set and verified!"

      - name: üì¶ Install dependencies
        run: |
          echo "Installing production dependencies..."
          npm ci --only=production --legacy-peer-deps
          npm cache clean --force
          echo "‚úÖ Dependencies installed successfully"

      - name: üßπ Prepare deployment package
        run: |
          echo "Preparing deployment package..."
          mkdir -p deployment

          # Copy essential files
          cp -r app.js server.js package.json package-lock.json deployment/

          # Copy environment file if it exists (but remove sensitive data in real scenario)
          if [ -f "config.env" ]; then 
            # In real scenario, you might want to create a production config instead
            cp config.env deployment/
            echo "‚úÖ config.env included"
          else
            echo "‚ÑπÔ∏è  config.env not found"
          fi

          # Copy other directories that might exist
          for dir in src public views routes models middleware config; do
            if [ -d "$dir" ]; then
              cp -r "$dir" deployment/
              echo "‚úÖ $dir directory included"
            fi
          done

          echo "üì¶ Deployment package contents:"
          ls -la deployment/

      - name: üì§ Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: /benzback/
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/**
            **/test/**
            **/*.md
            **/.env.example
            **/.gitignore
            **/README.md
            **/docker-compose*
            **/Dockerfile
            **/deployment/
          dangerous-clean-slate: false
          log-level: verbose

      - name: üìã Deployment Summary
        run: |
          echo ""
          echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "======================================"
          echo "üåê Application deployed to: /public_html/myapp/"
          echo "üîó Live URL: https://benzflex.com"
          echo ""
          echo "üîß POST-DEPLOYMENT STEPS:"
          echo "   1. SSH into your server"
          echo "   2. Navigate to: cd /home/turtlvhi/public_html/myapp"
          echo "   3. Install production dependencies: npm install --production"
          echo "   4. Set up environment variables in cPanel"
          echo "   5. Restart your Node.js app via cPanel Node.js Selector"
          echo "   6. Verify at: https://benzflex.com"
